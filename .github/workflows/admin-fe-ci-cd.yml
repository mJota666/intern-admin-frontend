name: Admin Frontend CI/CD

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "public/**"
      - "package.json"
      - "package-lock.json"
      - "Dockerfile"
      - ".github/workflows/admin-frontend-ci.yml"

jobs:
  build-and-push:
    name: Build & Push Image
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.meta.outputs.tag }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install & build
        run: |
          npm ci
          npm run build

      - uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/admin-frontend
          TAG=${{ github.sha }}
          docker build -t $IMAGE:$TAG .

      - name: Push Docker image
        run: |
          IMAGE=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/admin-frontend
          TAG=${{ github.sha }}
          docker push $IMAGE:$TAG

      - name: Set image tag output
        id: meta
        run: echo "::set-output name=tag::${GITHUB_SHA}"

  deploy:
    name: Deploy to Droplet
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Droplet to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Pull & restart admin-frontend
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          ADMIN_PATH: ${{ secrets.ADMIN_PATH }}
          IMAGE: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/admin-frontend
          TAG: ${{ needs.build-and-push.outputs.tag }}
        run: |
          ssh -o ServerAliveInterval=60 $DEPLOY_USER@$DEPLOY_HOST << EOF
            cd $ADMIN_PATH

            # Pull the new, CI-built image (with sudo to reach the Docker socket)
            sudo docker pull ${IMAGE}:${TAG}

            # Restart only the admin-frontend container
            sudo docker-compose up -d --no-deps admin-frontend
          EOF
